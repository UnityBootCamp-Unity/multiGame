// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: multi_gameplay.proto
// </auto-generated>
// Original file comments:
// multiGamePlay.proto
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Game.MultiGamePlay {
  public static partial class MultiGamePlayService
  {
    static readonly string __ServiceName = "game.multiGamePlay.MultiGamePlayService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Game.MultiGamePlay.CreateAllocationRequest> __Marshaller_game_multiGamePlay_CreateAllocationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Game.MultiGamePlay.CreateAllocationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Game.MultiGamePlay.CreateAllocationResponse> __Marshaller_game_multiGamePlay_CreateAllocationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Game.MultiGamePlay.CreateAllocationResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Game.MultiGamePlay.DeleteAllocationRequest> __Marshaller_game_multiGamePlay_DeleteAllocationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Game.MultiGamePlay.DeleteAllocationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Game.MultiGamePlay.GetAllocationsRequest> __Marshaller_game_multiGamePlay_GetAllocationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Game.MultiGamePlay.GetAllocationsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Game.MultiGamePlay.GetAllocationsResponse> __Marshaller_game_multiGamePlay_GetAllocationsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Game.MultiGamePlay.GetAllocationsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Game.MultiGamePlay.GetAllocationRequest> __Marshaller_game_multiGamePlay_GetAllocationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Game.MultiGamePlay.GetAllocationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Game.MultiGamePlay.GetAllocationResponse> __Marshaller_game_multiGamePlay_GetAllocationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Game.MultiGamePlay.GetAllocationResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Game.MultiGamePlay.UpdateGameplayStatusRequest> __Marshaller_game_multiGamePlay_UpdateGameplayStatusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Game.MultiGamePlay.UpdateGameplayStatusRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Game.MultiGamePlay.CreateAllocationRequest, global::Game.MultiGamePlay.CreateAllocationResponse> __Method_CreateAllocation = new grpc::Method<global::Game.MultiGamePlay.CreateAllocationRequest, global::Game.MultiGamePlay.CreateAllocationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAllocation",
        __Marshaller_game_multiGamePlay_CreateAllocationRequest,
        __Marshaller_game_multiGamePlay_CreateAllocationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Game.MultiGamePlay.DeleteAllocationRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteAllocation = new grpc::Method<global::Game.MultiGamePlay.DeleteAllocationRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAllocation",
        __Marshaller_game_multiGamePlay_DeleteAllocationRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Game.MultiGamePlay.GetAllocationsRequest, global::Game.MultiGamePlay.GetAllocationsResponse> __Method_GetAllocations = new grpc::Method<global::Game.MultiGamePlay.GetAllocationsRequest, global::Game.MultiGamePlay.GetAllocationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllocations",
        __Marshaller_game_multiGamePlay_GetAllocationsRequest,
        __Marshaller_game_multiGamePlay_GetAllocationsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Game.MultiGamePlay.GetAllocationRequest, global::Game.MultiGamePlay.GetAllocationResponse> __Method_GetAllocation = new grpc::Method<global::Game.MultiGamePlay.GetAllocationRequest, global::Game.MultiGamePlay.GetAllocationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllocation",
        __Marshaller_game_multiGamePlay_GetAllocationRequest,
        __Marshaller_game_multiGamePlay_GetAllocationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Game.MultiGamePlay.UpdateGameplayStatusRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_UpdateGameplayStatus = new grpc::Method<global::Game.MultiGamePlay.UpdateGameplayStatusRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateGameplayStatus",
        __Marshaller_game_multiGamePlay_UpdateGameplayStatusRequest,
        __Marshaller_google_protobuf_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Game.MultiGamePlay.MultiGameplayReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MultiGamePlayService</summary>
    [grpc::BindServiceMethod(typeof(MultiGamePlayService), "BindService")]
    public abstract partial class MultiGamePlayServiceBase
    {
      /// <summary>
      /// Dedicated Server Allocation(할당) 요청
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Game.MultiGamePlay.CreateAllocationResponse> CreateAllocation(global::Game.MultiGamePlay.CreateAllocationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Dedicated Server Remove(할당) 해제 요청
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteAllocation(global::Game.MultiGamePlay.DeleteAllocationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Dedicated Server Get Allocations(할당) 목록 읽기
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Game.MultiGamePlay.GetAllocationsResponse> GetAllocations(global::Game.MultiGamePlay.GetAllocationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Dedicated Server Get Allocation(할당 정보) 읽기
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Game.MultiGamePlay.GetAllocationResponse> GetAllocation(global::Game.MultiGamePlay.GetAllocationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sever status 변경요청
      ///==================================================
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> UpdateGameplayStatus(global::Game.MultiGamePlay.UpdateGameplayStatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MultiGamePlayService</summary>
    public partial class MultiGamePlayServiceClient : grpc::ClientBase<MultiGamePlayServiceClient>
    {
      /// <summary>Creates a new client for MultiGamePlayService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public MultiGamePlayServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MultiGamePlayService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public MultiGamePlayServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected MultiGamePlayServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected MultiGamePlayServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Dedicated Server Allocation(할당) 요청
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Game.MultiGamePlay.CreateAllocationResponse CreateAllocation(global::Game.MultiGamePlay.CreateAllocationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAllocation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Dedicated Server Allocation(할당) 요청
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Game.MultiGamePlay.CreateAllocationResponse CreateAllocation(global::Game.MultiGamePlay.CreateAllocationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAllocation, null, options, request);
      }
      /// <summary>
      /// Dedicated Server Allocation(할당) 요청
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Game.MultiGamePlay.CreateAllocationResponse> CreateAllocationAsync(global::Game.MultiGamePlay.CreateAllocationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAllocationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Dedicated Server Allocation(할당) 요청
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Game.MultiGamePlay.CreateAllocationResponse> CreateAllocationAsync(global::Game.MultiGamePlay.CreateAllocationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAllocation, null, options, request);
      }
      /// <summary>
      /// Dedicated Server Remove(할당) 해제 요청
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteAllocation(global::Game.MultiGamePlay.DeleteAllocationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAllocation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Dedicated Server Remove(할당) 해제 요청
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteAllocation(global::Game.MultiGamePlay.DeleteAllocationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAllocation, null, options, request);
      }
      /// <summary>
      /// Dedicated Server Remove(할당) 해제 요청
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteAllocationAsync(global::Game.MultiGamePlay.DeleteAllocationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAllocationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Dedicated Server Remove(할당) 해제 요청
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteAllocationAsync(global::Game.MultiGamePlay.DeleteAllocationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAllocation, null, options, request);
      }
      /// <summary>
      /// Dedicated Server Get Allocations(할당) 목록 읽기
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Game.MultiGamePlay.GetAllocationsResponse GetAllocations(global::Game.MultiGamePlay.GetAllocationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllocations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Dedicated Server Get Allocations(할당) 목록 읽기
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Game.MultiGamePlay.GetAllocationsResponse GetAllocations(global::Game.MultiGamePlay.GetAllocationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAllocations, null, options, request);
      }
      /// <summary>
      /// Dedicated Server Get Allocations(할당) 목록 읽기
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Game.MultiGamePlay.GetAllocationsResponse> GetAllocationsAsync(global::Game.MultiGamePlay.GetAllocationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllocationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Dedicated Server Get Allocations(할당) 목록 읽기
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Game.MultiGamePlay.GetAllocationsResponse> GetAllocationsAsync(global::Game.MultiGamePlay.GetAllocationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAllocations, null, options, request);
      }
      /// <summary>
      /// Dedicated Server Get Allocation(할당 정보) 읽기
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Game.MultiGamePlay.GetAllocationResponse GetAllocation(global::Game.MultiGamePlay.GetAllocationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllocation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Dedicated Server Get Allocation(할당 정보) 읽기
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Game.MultiGamePlay.GetAllocationResponse GetAllocation(global::Game.MultiGamePlay.GetAllocationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAllocation, null, options, request);
      }
      /// <summary>
      /// Dedicated Server Get Allocation(할당 정보) 읽기
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Game.MultiGamePlay.GetAllocationResponse> GetAllocationAsync(global::Game.MultiGamePlay.GetAllocationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllocationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Dedicated Server Get Allocation(할당 정보) 읽기
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Game.MultiGamePlay.GetAllocationResponse> GetAllocationAsync(global::Game.MultiGamePlay.GetAllocationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAllocation, null, options, request);
      }
      /// <summary>
      /// Sever status 변경요청
      ///==================================================
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty UpdateGameplayStatus(global::Game.MultiGamePlay.UpdateGameplayStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateGameplayStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sever status 변경요청
      ///==================================================
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty UpdateGameplayStatus(global::Game.MultiGamePlay.UpdateGameplayStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateGameplayStatus, null, options, request);
      }
      /// <summary>
      /// Sever status 변경요청
      ///==================================================
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> UpdateGameplayStatusAsync(global::Game.MultiGamePlay.UpdateGameplayStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateGameplayStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sever status 변경요청
      ///==================================================
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> UpdateGameplayStatusAsync(global::Game.MultiGamePlay.UpdateGameplayStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateGameplayStatus, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override MultiGamePlayServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MultiGamePlayServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(MultiGamePlayServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateAllocation, serviceImpl.CreateAllocation)
          .AddMethod(__Method_DeleteAllocation, serviceImpl.DeleteAllocation)
          .AddMethod(__Method_GetAllocations, serviceImpl.GetAllocations)
          .AddMethod(__Method_GetAllocation, serviceImpl.GetAllocation)
          .AddMethod(__Method_UpdateGameplayStatus, serviceImpl.UpdateGameplayStatus).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MultiGamePlayServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateAllocation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Game.MultiGamePlay.CreateAllocationRequest, global::Game.MultiGamePlay.CreateAllocationResponse>(serviceImpl.CreateAllocation));
      serviceBinder.AddMethod(__Method_DeleteAllocation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Game.MultiGamePlay.DeleteAllocationRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteAllocation));
      serviceBinder.AddMethod(__Method_GetAllocations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Game.MultiGamePlay.GetAllocationsRequest, global::Game.MultiGamePlay.GetAllocationsResponse>(serviceImpl.GetAllocations));
      serviceBinder.AddMethod(__Method_GetAllocation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Game.MultiGamePlay.GetAllocationRequest, global::Game.MultiGamePlay.GetAllocationResponse>(serviceImpl.GetAllocation));
      serviceBinder.AddMethod(__Method_UpdateGameplayStatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Game.MultiGamePlay.UpdateGameplayStatusRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.UpdateGameplayStatus));
    }

  }
}
#endregion
